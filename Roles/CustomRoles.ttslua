-- [ Custom Roles ] --
-- These are the Roles and functions for the custom roles

-- Resistance
function role_Mayor(color)
  local data = role_Resistance(color)
  data["Role"] = "Mayor"
  data["Revealed"] = false
  data["Setup"] = function(color)
    if not data["Revealed"] then
      --printToColor('Click the Reveal button or type "!reveal"', color, {1,0,0})

      local buttondata = {click_function = "activate_reveal", function_owner = Global, label = "Reveal",
        position = {0, 0, 1.2}, scale = {0.3, 0.3, 0.3}, width = 2500, height = 400, font_size = 400}

      local board = getObjectFromGUID(data.Card)
      board.createButton(buttondata)
    end
  end
  data["Clean"] = {}
  data["Reveal"] = function(color)
    local playerHand = Player[color].getPlayerHand()
    local rot = {playerHand['rot_x'] + 55, playerHand['rot_y'], 0}
    local pos = {playerHand['pos_x'] + playerHand['trigger_forward_x'] * 6.6, -1, playerHand['pos_z'] + playerHand['trigger_forward_z'] * 6.6}

    local card = data.Card.clone({ position     = pos })
    pos = {playerHand['pos_x'] + playerHand['trigger_forward_x'] * 6.6, 4, playerHand['pos_z'] + playerHand['trigger_forward_z'] * 6.6}

    card.setPositionSmooth(pos)
    card.setRotationSmooth(rot)
    card.setScale({2.7, 1, 2.7})

    table.insert(data.Clean, card)

    broadcastToAll(output_name(color) .. ref_colorCodes.Resistance .. " has revealed as the Mayor!", {1,1,1})
  end
  data["Calculate Votes"] = function(color, voteCalc)
    local vote = data_playerVotes[color]

    if vote.getName() == "Approve" then
      voteCalc.approves = voteCalc.approves + 1
    else
      voteCalc.rejects = voteCalc.rejects + 1
    end

    return voteCalc
  end
  return data
end
function role_Witness(color)
  local data = role_Resistance(color)
  data["Role"] = "Witness"
  data["Deal Mission"] = function(color)
    if data_missionTeam[color] ~= nil then
      local colorOptions = table.removeItems(data_missionColors,color)
      local board = getObjectFromGUID(data.Card)
      local clickName = "witness_selectMain"
      local func = function(obj, co)
        if co == color then
          local selectTable = Global.getTable("table_savedData"..obj.getGUID())
          local selected = selectTable.Selected
          printToColor("Witnessing "..ref_colorCodes[selected]..selected, co, {0,0.65,1})
        end
      end
      Global.setVar(clickName, func)
      create_scrollOptions(color, colorOptions, clickName)
    end
  end
  data["Mission Results"] = function(color)
    if object_revealedMission[color] ~= nil then
      local card = object_revealedMission[color]

      local guid = data.Card
      local data = Global.getTable("table_savedData"..guid)

      local newCard = object_revealedMission[data.Selected]
      replace_card(color, card, newCard, "calculate_missionResults", "object_revealedMission")

      printToColor("You Witnessed " .. output_name(data.Selected), color, {0,0.65,1})
    else
      startLuaCoroutine(Global, 'calculate_missionResults')
    end
  end
  data["Deal Team"] = function(color)
    local guid = data.Board
    local board = getObjectFromGUID(guid)
    board.clearButtons()
    Global.setTable("table_savedData"..guid, {})
  end
  return data
end
function role_Hacker(color)
  local data = role_Resistance(color)
  data["Role"] = "Hacker"
  data["Setup"] = function(color)
    local clickName = "hacker_clickMain"
    local func = function(obj, co)
      if co == color then
        local selectTable = Global.getTable("table_savedData"..obj.getGUID())
        local selected = selectTable.Selected
        printToColor("Hacking "..ref_colorCodes[selected]..selected, co, {0,0.65,1})
      end
    end
    Global.setVar(clickName, func)
    create_scrollOptions(color, data_playersInGame, clickName)
  end
  data["Vote Reveal"] = function(color)
    local guid = data.Card
    local board = getObjectFromGUID(guid)

    local data = Global.getTable("table_savedData"..guid)
    local selected = data.Selected

    local orginalCard = data_playerVotes[color]
    local hackedCard = data_playerVotes[selected]

    replace_card(selected, hackedCard, orginalCard, "calculate_votes", "data_playerVotes")
  end
  return data
end
function role_Pilot(color)
  local data = role_Resistance(color)
  data["Role"] = "Pilot"
  data["Mission Cards"] = {"Success", "Extract"}

  if #data_playersInGame >= 7 then
    data["Card Limits"] = {["Extract"] = 2}
  else
    data["Card Limits"] = {["Extract"] = 1}
  end

  return data
end
function role_Confidant(color)
  local data = role_Resistance(color)
  data["Role"] = "Confidant"
  data["Output"] = function()
    local output = ""
    local object = find_playersByRole({"Resistance Defector","Spy Defector"})

    local defector = object["Resistance Defector"]
    local falsecommander = object["Spy Defector"]

    if math.random(100) >= 50 then falsecommander, defector = defector, falsecommander end

    return ref_colorCodes.Resistance .. "You are the Defector's Confidant!\n" .. output_name(defector) .. " [00aaff]is a Defector!"
  end
  return data
end
function role_Pathologist(color)
  local data = role_Resistance(color)
  data["Role"] = "Pathologist"
  data["Mission Cards"] = {"Success", "Cure"}

  return data
end


-- Spy Roles
function role_Politician(color)
  local data = role_Spy(color)
  data["Role"] = "Politician"
  data["Revealed"] = false
  data["Setup"] = function(color)
    if not data_playerData[color]["Revealed"] then
      printToColor('Click the Reveal button or type "!reveal"', color, {1,0,0})

      local buttondata = {click_function = "activate_reveal", function_owner = self, label = "Reveal",
        position = {0, 0, 1.2}, scale = {0.3, 0.3, 0.3}, width = 2500, height = 400, font_size = 400}

      local board = getObjectFromGUID(data.Card)
      board.createButton(buttondata)
    end
  end
  data["Clean"] = {}
  data["Reveal"] = function(color)
    local randomIndex = math.random(#ref_roleCards["Mayor"])
    local tempcard = getObjectFromGUID(ref_roleCards["Mayor"][randomIndex])

    local playerHand = Player[color].getPlayerHand()
    local rot = {playerHand['rot_x'] + 55, playerHand['rot_y'], 0}
    local pos = {playerHand['pos_x'] + playerHand['trigger_forward_x'] * 6.6, -1, playerHand['pos_z'] + playerHand['trigger_forward_z'] * 6.6}

    local card = tempcard.clone({
      position     = pos,
    })
    pos = {playerHand['pos_x'] + playerHand['trigger_forward_x'] * 6.6, 4, playerHand['pos_z'] + playerHand['trigger_forward_z'] * 6.6}

    card.setPositionSmooth(pos)
    card.setRotationSmooth(rot)
    card.setScale({2.7, 1, 2.7})

    table.insert(data_playerData[color].Clean, card)

    broadcastToAll(output_name(color) .. ref_colorCodes.Resistance .. " has revealed as the Mayor!", {1,1,1})
  end
  data["Calculate Votes"] = function(color, voteCalc)
    local vote = data_playerVotes[color]

    if vote.getName() == "Approve" then
      voteCalc.approves = voteCalc.approves + 1
    else
      voteCalc.rejects = voteCalc.rejects + 1
    end

    return voteCalc
  end
  return data
end
function role_Hitman(color)
  local data = role_Spy(color)
  data["Role"] = "Hitman"
  data["Mission Cards"] = {"Success", "Fail", "Hit"}

  if #data_playersInGame >= 7 then
    data["Card Limits"] = {["Hit"] = 2}
  else
    data["Card Limits"] = {["Hit"] = 1}
  end

  return data
end
function role_Mole(color)
  local data = role_Spy(color)
  data["Role"] = "Mole"
  data["Mission Cards"] = {"Sabotage", "Fail"}
  data["End Game"] = {
    priority = 2,
    runFunction = function(winner, color)
      if table.contains(object_missionCards, "Sabotage") and data_currentMission == 5 then
        end_game("Mole")
      else
        check_victory(winner)
      end
    end
  }
  return data
end
function role_Corruptor(color)
  local data = role_Spy(color)
  data["Role"] = "Corruptor"
  data["Setup"] = function(color)
    local clickName = "corruptor_clickMain"
    local func = function(obj, co)
      if co == color then
        local selectTable = Global.getTable("table_savedData"..obj.getGUID())
        local selected = selectTable.Selected
        printToColor("Hacking "..ref_colorCodes[selected]..selected, co, {0,0.65,1})
      end
    end
    Global.setVar(clickName, func)
    create_scrollOptions(color, data_playersInGame, clickName)
  end
  data["Vote Reveal"] = function(color)
    local guid = data.Card
    local board = getObjectFromGUID(guid)

    local data = Global.getTable("table_savedData"..guid)
    local selected = data.Selected

    local corrupted = ""

    local roles = find_playersByRole({"Hacker"})
    for _,hackcolor in pairs(roles) do
      local hackerguid = ref_playerBoards[hackcolor]
      local hackerdata = Global.getTable("table_savedData"..hackerguid)
      local hackerselected = hackerdata.Selected

      if selected == hackerselected then
        corrupted = hackcolor
      end
    end

    if corrupted ~= "" then
      local orginalCard = data_playerVotes[color]
      local hackedCard = data_playerVotes[corrupted]
      local corruptCard = data_playerVotes[selected]
      replace_card(selected, corruptCard, orginalCard, nil, "data_playerVotes")
      replace_card(corrupted, hackedCard, orginalCard, "calculate_votes", "data_playerVotes")
    else
      startLuaCoroutine(Global, "calculate_votes")
    end
  end
  return data
end
function role_Bioterrorist(color)
  local data = role_Spy(color)
  data["Role"] = "Bioterrorist"
  data["Activate Mutate"] = false
  data["Deal Mission"] = function(color)
    if data_missionTeam[color] ~= nil then
      local colorOptions = table.removeItems(data_missionColors,color)
      local board = getObjectFromGUID(data.Card)
      local clickName = "bioterrorist_selectMain"
      local func = function(obj, co)
        if co == color then
          local selectTable = Global.getTable("table_savedData"..obj.getGUID())
          local selected = selectTable.Selected
          printToColor("Infecting "..ref_colorCodes[selected]..selected, co, {1,0,0})
        end
      end
      Global.setVar(clickName, func)
      create_scrollOptions(color, colorOptions, clickName)
    else
      local infected = data["Infected Players"]
      local hasInfected = false
      for _,misColor in pairs(data_missionColors) do
        if table.contains(infected, misColor) then
          hasInfected = true
          break
        end
      end

      if hasInfected then
        local buttondata = {click_function = "activate_outbreak", function_owner = self, label = "Mutate",
          position = {0, 0, 1.2}, scale = {0.3, 0.3, 0.3}, width = 2500, height = 400, font_size = 400}

        local board = getObjectFromGUID(data.Card)
        board.createButton(buttondata)
      end
    end
  end
  data["Infected Players"] = {}
  data["Mutate Players"] = {}
  data["Mission Results"] = function(color)
    local board = getObjectFromGUID(data.Card)
    board.clearButtons()

    local infected = data["Infected Players"]
    local outbreak = data["Mutate Players"]

    if object_revealedMission[color] ~= nil then
      local guid = data.Card
      local savedData = Global.getTable("table_savedData"..guid)
      local infectColor =  savedData.Selected

      if not table.contains(data["Infected Players"], infectColor) then
        table.insert(data["Infected Players"], infectColor)
        --print("You've infected " .. output_name(infectColor))
        printToColor("You've infected " .. output_name(infectColor), color, {1,0,0})
      end

      startLuaCoroutine(Global, 'calculate_missionResults')
    else
      local mutatedCards = {}
      local mutatedColors = {}

      for _,misColor in pairs(data_missionColors) do
        -- Check if mission member has been infected
        if table.contains(data["Infected Players"], misColor) then
          -- Check if a mutation is active
          if outbreak[misColor] then
            -- Trigger mutation
            local infectedCard = object_revealedMission[misColor]
            outbreak[misColor] = false

            infected = table.removeItems(infected, misColor)

            table.insert(mutatedCards, infectedCard)
            table.insert(mutatedColors, misColor)
          else
            -- Infect other player
            local colorOptions = table.removeItems(data_missionColors,misColor)
            local infectedPlayer = colorOptions[math.random(#colorOptions)]

            if not table.contains(data["Infected Players"], infectedPlayer) then
              table.insert(infected, infectedPlayer)
              --print("The infection has spread to " .. output_name(infectedPlayer))
              printToColor("The infection has spread to " .. output_name(infectedPlayer), color, {1,0,0})
            end
          end
        end
      end

      if #mutatedColors ~= 0 then
        replace_card(mutatedColors, mutatedCards, "Fail", "calculate_missionResults", "object_revealedMission")
        --print("Your virus has mutated!")
        printToColor("Your virus has mutated!", color, {1,0,0})
      else
        startLuaCoroutine(Global, 'calculate_missionResults')
      end
    end

    data["Infected Players"] = infected
    data["Mutate Players"] = outbreak
    data["Activate Mutate"] = false
  end
  return data
end


function activate_outbreak(obj, color)
  if data_playerData[color].Role == "Bioterrorist" then
    local infected = data_playerData[color]["Infected Players"]
    local outbreak = {}

    local toggle = data_playerData[color]["Activate Mutate"]

    if not toggle then
      for _,col in pairs(data_missionColors) do
        if table.contains(infected, col) then
          outbreak[col] = true
        end
      end
      toggle = true
      printToColor("Your virus will mutate during this mission", color, {1,0,0})
    else
      for _,col in pairs(data_missionColors) do
        if table.contains(infected, col) then
          outbreak[col] = false
        end
      end
      toggle = false
      printToColor("You will prevent your virus from mutating", color, {1,0,0})
    end

    data_playerData[color]["Mutate Players"] = outbreak
    data_playerData[color]["Activate Mutate"] = toggle
  end
end


-- Neutral Roles
function role_Amnesiac(color)
  local data = data_playerData[color]

  data["Old Role"] = data["Role"]
  data["Role"] = "Amnesiac"

  data["Original Mission Cards"] = data["Mission Cards"]

  data["Mission Cards"] = {"Success", "Fail"}

  local specialCards = {
    ["Spy Chief"] = "Chief Fail",
    ["Spy Reverser"] = "Reverse",
    ["Resistance Rogue"] = "Rogue Success",
    ["Resistance Reverser"] = "Reverse",
    ["Mole"] = "Sabotage",
  }

  for _,role in pairs(data_specialRoles.resistance) do
    if specialCards[role] ~= nil then
      if not table.contains(data["Mission Cards"],specialCards[role]) then
        table.insert(data["Mission Cards"], specialCards[role])
      end
    end
  end
  for _,role in pairs(data_specialRoles.spies) do
    if specialCards[role] ~= nil then
      if not table.contains(data["Mission Cards"],specialCards[role]) then
        table.insert(data["Mission Cards"], specialCards[role])
      end
    end
  end

  data["Remember"] = function()
    printToColor("You've remembered something...", color, {1,1,0})
    printToColor(data["Old Output"](color), color, {1,1,1})

    data["Output"] = data["Old Output"]

    data["Role"] = data["Old Role"]
    local role = data["Role"]

    local roles = ref_roleCards[role]

    local randomIndex = math.random(#roles)
    local card = getObjectFromGUID(roles[randomIndex]).clone()

    data["Card"].destruct()
    data.Card = card

    data["Place Card"](color, true)
  end

  data["Deal Mission"] = function()
    if data_currentMission == 5 then
      data["Remember"]()
    end
  end

  data["Old Output"] = data["Output"]

  local team = data_teams[data.Team]
  data["Teammate"] = team[math.random(#team)]

  data["Output"] = function()
    local teammate = data["Teammate"]
    return "[ffff00]You are... Actually, you don't recall who you are. You do however remember that " .. output_name(teammate) .. "[ffff00] was a friend..."
  end

  return data
end

ref_secondaryRestrictions = {
  ["Amnesiac"] = { "Mayor","Politician","Deep Agent","Spy Hunter","Hacker","Corruptor","Resistance Defector","Spy Defector" }
}
