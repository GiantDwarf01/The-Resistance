object_teamCards = {}
objects_teamToken = {}
objects_extraTeamCards = {}


-- Place leader token on
function set_leaderToken(color)
  local playersInGame = data_playersInGame
  local colorOrder = {
    "White", "Brown", "Red", "Orange", "Yellow",
    "Green", "Teal", "Blue", "Purple",  "Pink",
    "White", "Brown", "Red", "Orange", "Yellow",
    "Green", "Teal", "Blue", "Purple",  "Pink",
  }

  if data_currentLeader == "" then
    data_currentLeader = playersInGame[math.random(#playersInGame)]
  else
    data_currentLeader = color or nextPlayer(data_currentLeader, playersInGame)
  end

  local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
  local pos = board.positionToWorld(ref_boardPosition.Leader)
  local token = getObjectFromGUID(ref_tokens["Leader"])
  token.setPosition(pos)
  token.setRotation(board.getRotation())
  token.setLock(true)
  token.setScale({1.07,1,1.07})

  broadcastToAll(output_name(data_currentLeader) .. " is the Leader", {1,1,1})
end



-- Set mission token
function set_roundMarker()
  local token = getObjectFromGUID(ref_tokens["Round Marker"])
  token.setScale({0.79, 1.00, 0.79})
  token.setPosition(ref_roundMarkerPosition[data_currentMission])
  token.setLock(true)
end


data_usedSetupTeams = {}
-- Deal out round team tokens
function deal_teamTokens(skipLeader)
  print(data_gamePhase)
  data_gamePhase = "Setting Team Building"
  if not skipLeader then
    set_leaderToken()
  end

  set_voteTrack()
  set_roundMarker()
  clean_teamTokens()
  update_notes()
  data_missionTeam = {}
  objects_extraTeamCards = {}

  for _,option in pairs(data_includedOptions) do
    if data_optionData[option]["Setup Team"] ~= nil and not table.contains(data_usedSetupTeams, option) then
      table.insert(data_usedSetupTeams, option)
      data_optionData[option]["Setup Team"]()
      return
    end
  end

  data_usedSetupTeams = {}

  local missionMembers = ref_missionCount[#data_playersInGame][data_currentMission]

  for _,option in pairs(data_includedOptions) do
    if data_optionData[option]["Deal Team"] ~= nil then
      missionMembers = data_optionData[option]["Deal Team"](missionMembers)
    end
  end

  for color,data in pairs(data_playerData) do
    if data["Deal Team"] ~= nil then
      data["Deal Team"](color)
    end
  end

  local tokenPosition = ref_tokenPosition[missionMembers]
  local cards = ref_cardGuids["Team Token"]

  for _, pos in pairs(tokenPosition) do
    local gottenCard = getObjectFromGUID(cards[math.random(#cards)])
    local card = gottenCard.clone({position = pos})
    card.setScale({1.14,1,1.12})
    card.setRotation({0,180,0})
    card.setLock(false)
    card.interactable = true

    table.insert(object_teamCards, card)
  end

  data_missionCount = missionMembers
  setGamePhase("Team Building")
end

data_setGamePhase = ""
function setGamePhase(phase)
  data_setGamePhase = phase
  startLuaCoroutine(Global, 'coroutine_delayGamePhase')
end

function coroutine_delayGamePhase()
  for i=0,50 do
    coroutine.yield()
  end
  data_gamePhase = data_setGamePhase
  return 1
end

-- Check placed team
function repeating_teamChecks()
  local missionTeam = data_missionTeam
  -- Check Team Token area
  for index,color in pairs(data_playersInGame) do
    local boardGUID = ref_playerBoards[color]
    local board = getObjectFromGUID(ref_playerBoards[color])
    local teamPos = board.positionToWorld(ref_boardPosition.Team)

    local teamList = getObjectsAtPosition(teamPos, "Card")

    if #teamList > 0 then
      if not missionTeam[color] then
        missionTeam[color] = teamList[1]
        update_notes()
      end
    else
      if missionTeam[color] then
        missionTeam[color] = nil
        update_notes()
      end
    end
  end

  data_missionTeam = missionTeam

  local optionReq = true
  for _,option in pairs(data_includedOptions) do
    if data_optionData[option]["Team Requirement"] ~= nil then
      if not data_optionData[option]["Team Requirement"]() then
        optionReq = false
      else
        update_notes()
      end
    end
  end

  if table.size(missionTeam) == data_missionCount and optionReq then
    data_missionColors = {}

    data_gamePhase = "Voting Phase"

    for color,card in pairs(missionTeam) do
      local boardGUID = ref_playerBoards[color]
      local board = getObjectFromGUID(ref_playerBoards[color])

      local teamPos = board.positionToWorld(ref_boardPosition.Team)
      card.setPosition(teamPos)
      card.setRotation(board.getRotation())
      card.setLock(true)

      table.insert(data_missionColors, color)
    end

    if objects_extraTeamCards ~= nil and objects_extraTeamCards ~= {} then
      for color,card in pairs(objects_extraTeamCards) do
        local boardGUID = ref_playerBoards[color]
        local board = getObjectFromGUID(ref_playerBoards[color])

        local teamPos = board.positionToWorld(ref_boardPosition[card.spot])
        card.object.setPosition(teamPos)
        card.object.setRotation(board.getRotation())
        card.object.setLock(true)
      end
    end

    deal_voteCards()
  end
end

-- Clean up team tokens
function clean_teamTokens()
  for _, token in pairs(object_teamCards) do
    if token ~= nil then
      token.destruct()
    end
  end

  for _, token in pairs(objects_teamToken) do
    if token ~= nil then
      token.destruct()
    end
  end

  for index,color in pairs(data_playersInGame) do
    local boardGUID = ref_playerBoards[color]
    local board = getObjectFromGUID(ref_playerBoards[color])
    local teamPos = board.positionToWorld(ref_boardPosition.Team)

    local teamList = getObjectsAtPosition(teamPos, "Card")

    for _,card in pairs(teamList) do
      if card.getName() == "Team Token" then
        card.destruct()
      end
    end
  end

  object_teamCards = {}
  objects_teamToken = {}
end
