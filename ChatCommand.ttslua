--[[ Comand Functions ]]--
-- Displays the help for all commands
function command_displayHelp(player, args)
  local output = "[9F1FEF]Resistance Console Help, do not type <>, ex. !role Batman"
  if #args == 0 then
    for command,description in pairs(ref_commandsDisplay) do
      output = output .. "\n[30B22A]!" .. command .. " [FFFFFF][" .. description .. "]"
    end
  else

  end
  printToColor(output, player.color, {0,0,0})
  return false
end
-- Displays player's role
function command_showRole(player, args)
  if #args == 0 then
    local data = data_playerData[player.color]
    local output = data["Saved Output"]
    printToColor(output, player.color, {1,1,0})
  end

  return false
end
-- Force Votes
function command_skipVote(player, args)
  if not player.admin then return false end
  if data_gamePhase == "Voting Phase" then
    if #args == 1 then
      local card = ""
      if args[1] == "Approve" then
        card = "Approve"
      elseif args[1] == "Reject" then
        card = "Reject"
      else
        return false
      end

      for index,color in pairs(data_playersInGame) do
        if data_playerVotes[color] ~= nil then
          data_playerVotes[color].destruct()
        end

        local board = getObjectFromGUID(ref_playerBoards[color])
        local pos = board.positionToWorld(ref_boardPosition.Vote)
        local rot = board.getRotation()
        data_playerVotes[color] = getObjectFromGUID(ref_cardGuids[card]).clone({position = pos})
        rot.z = 0
        --data_playerVotes[color].interactable = false
        data_playerVotes[color].setScale({1.25, 1.00, 1.25})
        data_playerVotes[color].setPosition(pos)
        data_playerVotes[color].setRotationSmooth(rot)
        data_playerVotes[color].setLock(true)
      end

      return false
    end
  end

  return false
end
-- Redeals cards to players
function command_reset(player, args)
  local color = ""
  if #args == 0 or not player.admin then
    color = player.color
  elseif #args >= 1 then
    color = args[1]
  end
  if color == "" or not table.contains(data_playersInGame, color) then return false end

  if data_gamePhase == "Voting Phase" then
    local role = data_playerRoles[color]
    local data = data_playerData[color]

    local objects = Player[color].getHandObjects()
    for _,card in pairs(objects) do
      card.destruct()
    end

    if data_playerVotes[color] ~= nil then
      data_playerVotes[color].destruct()
      data_playerVotes[color] = nil
    end

    if data["Deal Votes"] ~= nil then
      data["Deal Votes"](color)
    end

    local boardGUID = ref_playerBoards[color]
    local board = getObjectFromGUID(ref_playerBoards[color])
    local teamPos = board.positionToWorld(ref_boardPosition.Hand)

    local approveCard = getObjectFromGUID(ref_cardGuids["Approve"])
    local rejectCard = getObjectFromGUID(ref_cardGuids["Reject"])

    local card = approveCard.clone({position = teamPos})
    card.setScale({1.25,1,1.25})
    card.setRotation(board.getRotation())
    card.setDescription(color)
    card.setLock(false)
    card.interactable = true
    table.insert(object_voteCards, card)

    card = rejectCard.clone({position = teamPos})
    card.setScale({1.25,1,1.25})
    card.setRotation(board.getRotation())
    card.setDescription(color)
    card.setLock(false)
    card.interactable = true
    table.insert(object_voteCards, card)
  elseif data_gamePhase == "Mission" then
    remove_missionCard(color)

    local role = data_playerRoles[color]
    local data = data_playerData[color]

    if data["Deal Mission"] ~= nil then
      data["Deal Mission"](color)
    end

    local boardGUID = ref_playerBoards[color]
    local board = getObjectFromGUID(ref_playerBoards[color])
    local teamPos = board.positionToWorld(ref_boardPosition.Hand)

    for _,card in pairs(data["Mission Cards"]) do
      local allow = true

      if data["Card Limits"] ~= nil and data["Card Limits"][card] ~= nil then
          local limit = data["Card Limits"][card]
          if data["Card Count"][card] ~= nil then
            local count = data["Card Count"][card]
            if limit <= count then
              allow = false
            end
          end
      end

      if card == "Rogue Success" then
          if data_optionData["Watching"] ~= nil then
            if data_optionData["Watching"]["Watching Player"] == color then
              allow = false
            end
          end
      end

      if allow then
        local missionCard = getObjectFromGUID(ref_cardGuids[card]).clone({position = teamPos})
        missionCard.setLock(false)
        missionCard.setRotation(board.getRotation())
        missionCard.setDescription(color)
        missionCard.interactable = true
      end
    end
  end

  return false
end

function coroutine_forceVotes()
  for i=0,50 do
    coroutine.yield()
  end

  place_votes()
  return 1
end

-- [ Command Functions ] --
-- Key to check beginning for
ref_commandKey = "!"
-- Help display for commands
ref_commandsDisplay = {
  ["role"] = "Displays your current role",
  ["reset"] = "Redeals your vote or mission cards",
}
ref_adminCommands = {
  ["force"] = "",
}

-- Command Constructors
ref_commands = {
  ["help"] = command_displayHelp,
  ["role"] = command_showRole,
  ["force"] = command_skipVote,
  ["reset"] = command_reset,
}

--[[ API Function ]]--
-- Runs whenever anyone uses the chat
function onChat(message, player)
  -- Checks if chat message has a command call
  if string.sub(message, 1, 1) == ref_commandKey then
    local fullString = string.sub(message, 2, string.len(message))
    local command = ""
    local command_args = {}
    local index = 0

    -- Get command and command arguements from input
    for value in string.gmatch(fullString, "%w+") do
      if index == 0 then
        command = value
      else
        command_args[index] = value
      end
      index = index + 1
    end

    -- Checks if command exists and calls it or returns "No command found"
    if ref_commands[command] == nil then
      broadcastToColor("No command \"" .. command .. "\" found.", player.color, {1,0,0})
      return false
    else
      return ref_commands[command](player, command_args)
    end
  end
end
