--[[ Comand Functions ]]--
-- Displays the help for all commands
function command_displayHelp(player, args)
  local output = "[9F1FEF]Resistance Console Help, do not type <>, ex. !role Batman"
  if #args == 0 then
    for command,description in pairs(ref_commandsDisplay) do
      output = output .. "\n[30B22A]!" .. command .. " [FFFFFF][" .. description .. "]"
    end
  else

  end
  printToColor(output, player.color, {0,0,0})
  return false
end
-- Displays player's role
function command_showRole(player, args)
  if #args == 0 then
    local data = data_playerData[player.color]
    local output = data["Saved Output"]
    printToColor(output, player.color, {1,1,0})
  end

  return false
end
-- Force Votes
function command_skipVote(player, args)
  if data_gamePhase == "Voting Phase" then
    if #args == 1 then
      local card = ""
      if args[1] == "Approve" then
        card = "Approve"
      elseif args[1] == "Reject" then
        card = "Reject"
      else
        return false
      end

      for index,color in pairs(data_playersInGame) do
        if data_playerVotes[color] ~= nil then
          data_playerVotes[color].destruct()
        end

        local board = getObjectFromGUID(ref_playerBoards[color])
        local pos = board.positionToWorld(ref_boardPosition.Vote)
        local rot = board.getRotation()
        data_playerVotes[color] = getObjectFromGUID(ref_cardGuids[card]).clone({position = pos})
        rot.z = 0
        --data_playerVotes[color].interactable = false
        data_playerVotes[color].setScale({1.25, 1.00, 1.25})
        data_playerVotes[color].setPosition(pos)
        data_playerVotes[color].setRotationSmooth(rot)
        data_playerVotes[color].setLock(true)
      end

      return false
    end
  end

  return false
end

function coroutine_forceVotes()
  for i=0,50 do
    coroutine.yield()
  end

  place_votes()
  return 1
end


-- Command Constructors
ref_commands = {
  ["help"] = command_displayHelp,
  ["role"] = command_showRole,
  ["force"] = command_skipVote,
}

--[[ API Function ]]--
-- Runs whenever anyone uses the chat
function onChat(message, player)
  -- Checks if chat message has a command call
  if string.sub(message, 1, 1) == ref_commandKey then
    local fullString = string.sub(message, 2, string.len(message))
    local command = ""
    local command_args = {}
    local index = 0

    -- Get command and command arguements from input
    for value in string.gmatch(fullString, "%w+") do
      if index == 0 then
        command = value
      else
        command_args[index] = value
      end
      index = index + 1
    end

    -- Checks if command exists and calls it or returns "No command found"
    if ref_commands[command] == nil then
      broadcastToColor("No command \"" .. command .. "\" found.", player.color, {1,0,0})
      return false
    else
      return ref_commands[command](player, command_args)
    end
  end
end
