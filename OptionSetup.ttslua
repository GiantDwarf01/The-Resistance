
function option_investigator()
  local data = {}
  data["Deal Team"] = function(missionCount)
    local invest = getObjectFromGUID(ref_tokens["Investigator"]).clone({
      position     = {0,1,15},
    })
    invest.setScale({1.64,1,1.66})
    invest.setName("Investigator")
    invest.setLock(false)
    invest.interactable = true

    table.insert(objects_teamToken, invest)

    data_optionData["Investigator"]["Investigator Player"] = ""
    return missionCount
  end
  data["Investigator Player"] = ""
  data["Team Requirement"] = function()
    -- Check Team Token area
    for index,color in pairs(data_playersInGame) do
      if color ~= data_currentLeader then
        local board = getObjectFromGUID(ref_playerBoards[color])
        local teamPos = board.positionToWorld(ref_boardPosition.Team)
        local list = getObjectsAtPosition(teamPos, "Tile")
        if #list > 0 then
          if data_optionData["Investigator"]["Investigator Player"] ~= color then
            data_optionData["Investigator"]["Investigator Player"] = color
            objects_extraTeamCards[color] = {object = list[1], spot = "Team"}
            data_extraTeam["Investigator"] = color
            update_notes()
            return true
          end
        else
          if data_optionData["Investigator"]["Investigator Player"] == color then
            data_optionData["Investigator"]["Investigator Player"] = nil
            objects_extraTeamCards[color] = nil
            data_extraTeam["Investigator"] = nil
            update_notes()
          end
        end
      end
    end

    if data_optionData["Investigator"]["Investigator Player"] == nil or data_optionData["Investigator"]["Investigator Player"] == "" then
      return false
    else
      return true
    end
  end
  data["End Mission"] = {
    priority = 10,
    runFunction = function(winner)
      local token = getObjectFromGUID(ref_tokens["Check Player"])
      if winner == "Resistance" then
        local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
        local teamPos = board.positionToWorld(ref_boardPosition.Vote)
        local tokenPo = token.clone({ position = teamPos })
        tokenPo.setRotation(board.getRotation())
        tokenPo.setLock(false)
        tokenPo.setScale({1,1,1})
        tokenPo.setName("Check Player")

        tokenPo.interactable = true
        clean_votes()

        data_gamePhase = "Investigating Resistance"
      elseif winner == "Spy" then
        local invest = data_optionData["Investigator"]["Investigator Player"]
        local board = getObjectFromGUID(ref_playerBoards[invest])
        local teamPos = board.positionToWorld(ref_boardPosition.Vote)
        local tokenPo = token.clone({ position = teamPos })
        tokenPo.setRotation(board.getRotation())
        tokenPo.setLock(false)
        tokenPo.setScale({1,1,1})
        tokenPo.setName("Check Player")

        tokenPo.interactable = true
        clean_votes()

        data_gamePhase = "Investigating Spy"
        return false
      end
    end}
  return data
end
function option_watching()
  local data = {}
  data["Deal Team"] = function(missionCount)
    local invest = getObjectFromGUID(ref_tokens["Watching"]).clone({
      position     = {0,1,15},
    })
    invest.setScale({1.07,1,1.07})
    invest.setName("Watching")
    invest.setLock(false)
    invest.interactable = true

    table.insert(objects_teamToken, invest)

    data_optionData["Watching"]["Watching Player"] = ""
    return missionCount
  end
  data["Watching Player"] = ""
  data["Team Requirement"] = function()
    -- Check Team Token area
    for index,color in pairs(data_playersInGame) do
      if color ~= data_currentLeader and data_missionTeam[color] ~= nil then
        local board = getObjectFromGUID(ref_playerBoards[color])
        local teamPos = board.positionToWorld(ref_boardPosition.Leader)
        local list = getObjectsAtPosition(teamPos, "Tile")
        if #list > 0 and list[1].getName() == "Watching" then
          if data_optionData["Watching"]["Watching Player"] ~= color then
            data_optionData["Watching"]["Watching Player"] = color
            objects_extraTeamCards[color] = {object = list[1], spot = "Leader"}
            data_extraTeam["Watching"] = color
            update_notes()
            return true
          end
        else
          if data_optionData["Watching"]["Watching Player"] == color then
            data_optionData["Watching"]["Watching Player"] = nil
            objects_extraTeamCards[color] = nil
            data_extraTeam["Watching"] = nil
            update_notes()
          end
        end
      end
    end

    if data_optionData["Watching"]["Watching Player"] == nil or data_optionData["Watching"]["Watching Player"] == "" then
      return false
    else
      return true
    end
  end
  return data
end
function option_inquistor()
  local data = {}
  data["Inquisitor"] = previousPlayer(data_currentLeader, data_playersInGame)
  data["Place Inquisitor"] = function(color, smooth)
    local inquisitorToken = getObjectFromGUID(ref_tokens["Inquisitor"])
    local board = getObjectFromGUID(ref_playerBoards[color])
    if not smooth then
      inquisitorToken.setPosition(board.positionToWorld({0,0.05,-2.4}))
      inquisitorToken.setRotation(board.getRotation())
    else
      inquisitorToken.setPositionSmooth(board.positionToWorld({0,0.05,-2.4}))
      inquisitorToken.setRotationSmooth(board.getRotation())
    end
  end

  data["Place Inquisitor"](data["Inquisitor"])

  data["End Mission"] = {
    priority = 5,
    runFunction = function(winner)
      if data_currentMission ~= 2 then
        local token = getObjectFromGUID(ref_tokens["Check Player"])
        local board = getObjectFromGUID(ref_playerBoards[data["Inquisitor"]])
        local teamPos = board.positionToWorld(ref_boardPosition.Vote)
        local tokenPo = token.clone({ position = teamPos })
        tokenPo.setRotation(board.getRotation())
        tokenPo.setLock(false)
        tokenPo.setScale({1.9,1,1.9})
        tokenPo.setName("Check Player")
        tokenPo.interactable = true
        clean_votes()
        data_gamePhase = "Inquisitor Check"
      else
        check_nextRound(winner)
      end
    end}
  return data
end
function option_trapper()
  local data = {}
  data["Deal Team"] = function(missionCount)
    print(missionCount)
    return missionCount + 1
  end
  data["Mission Results"] = function()
    local token = getObjectFromGUID(ref_tokens["Trap Player"])
    local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
    local teamPos = board.positionToWorld(ref_boardPosition.Vote)
    local tokenPo = token.clone({ position = teamPos })
    tokenPo.setRotation(board.getRotation())
    tokenPo.setLock(false)
    tokenPo.setScale({1.9,1,1.9})
    tokenPo.setName("Trap Player")
    tokenPo.interactable = true
    clean_votes()
    data_gamePhase = "Trap Player"
  end
  return data
end
function option_sergeant()
  local data = {}
  data["Deal Team"] = function(missionCount)
    local invest = getObjectFromGUID(ref_tokens["Sergeant"]).clone({
      position     = {0,1,15},
    })
    invest.setScale({1.07,1,1.07})
    invest.setName("Sergeant")
    invest.setLock(false)
    invest.interactable = true

    table.insert(objects_teamToken, invest)

    data_optionData["Sergeant"]["Sergeant Player"] = ""
    return missionCount
  end
  data["Sergeant Player"] = ""
  data["Team Requirement"] = function()
    -- Check Team Token area
    for index,color in pairs(data_playersInGame) do
      if color ~= data_currentLeader and data_missionTeam[color] ~= nil then
        local board = getObjectFromGUID(ref_playerBoards[color])
        local teamPos = board.positionToWorld(ref_boardPosition.Leader)
        local list = getObjectsAtPosition(teamPos, "Tile")
        if #list > 0 and list[1].getName() == "Sergeant" then
          if data_optionData["Sergeant"]["Sergeant Player"] ~= color then
            data_optionData["Sergeant"]["Sergeant Player"] = color
            objects_extraTeamCards[color] = {object = list[1], spot = "Leader"}
            data_extraTeam["Sergeant"] = color
            update_notes()
            return true
          end
        else
          if data_optionData["Sergeant"]["Sergeant Player"] == color then
            data_optionData["Sergeant"]["Sergeant Player"] = nil
            objects_extraTeamCards[color] = nil
            data_extraTeam["Sergeant"] = nil
            update_notes()
          end
        end
      end
    end

    if data_optionData["Sergeant"]["Sergeant Player"] == nil or data_optionData["Sergeant"]["Sergeant Player"] == "" then
      return false
    else
      return true
    end
  end

  data["Mission Results"] = function()
    data_gamePhase = "Sergeant Check"
    local token = getObjectFromGUID(ref_tokens["Check Player"])
    local board = getObjectFromGUID(ref_playerBoards[data["Sergeant Player"]])
    local teamPos = board.positionToWorld(ref_boardPosition.Vote)
    local tokenPo = token.clone({ position = teamPos })
    tokenPo.setRotation(board.getRotation())
    tokenPo.setLock(false)
    tokenPo.setScale({1.9,1,1.9})
    tokenPo.setName("Sergeant")
    tokenPo.interactable = true

    local data = {click_function = "click_passSergeant", function_owner = self, label = "PASS",
    position = {0, 0, 1.2}, scale = {0.5, 0.5, 0.5}, width = 1000, height = 400, font_size = 400}
    tokenPo.createButton(data)
    clean_votes()
  end
  return data
end
function option_targeted()
  local data = {}
  data["Setup Team"] = function()
    local token = getObjectFromGUID(ref_tokens["Round Marker"])
    token.setScale({0.79, 1.00, 0.79})
    token.setLock(false)
    local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
    local teamPos = board.positionToWorld(ref_boardPosition.Leader)
    teamPos.y = teamPos.y + 0.1
    token.setPosition(teamPos)

    data_gamePhase = "Choose Round"
  end
  return data
end
function option_commSilence()
  local data = {}
  data["Mission Results"] = function()

  end
  return data
end
