
function option_investigator()
  local data = {}
  data["Deal Team"] = function(missionCount)
    local invest = getObjectFromGUID(ref_tokens["Investigator"]).clone({
      position     = {0,1,15},
    })
    invest.setScale({1.64,1,1.66})
    invest.setName("Investigator")
    invest.setLock(false)
    invest.interactable = true

    table.insert(objects_teamToken, invest)

    data_optionData["Investigator"]["Investigator Player"] = ""
    return missionCount
  end
  data["Investigator Player"] = ""
  data["Team Requirement"] = function()
    -- Check Team Token area
    for index,color in pairs(data_playersInGame) do
      if color ~= data_currentLeader then
        local board = getObjectFromGUID(ref_playerBoards[color])
        local teamPos = board.positionToWorld(ref_boardPosition.Team)
        local list = getObjectsAtPosition(teamPos, "Tile")
        if #list > 0 then
          if data_optionData["Investigator"]["Investigator Player"] ~= color then
            data_optionData["Investigator"]["Investigator Player"] = color
            objects_extraTeamCards[color] = {object = list[1], spot = "Team"}
            data_extraTeam["Investigator"] = color
            update_notes()
            return true
          end
        else
          if data_optionData["Investigator"]["Investigator Player"] == color then
            data_optionData["Investigator"]["Investigator Player"] = nil
            objects_extraTeamCards[color] = nil
            data_extraTeam["Investigator"] = nil
            update_notes()
          end
        end
      end
    end

    if data_optionData["Investigator"]["Investigator Player"] == nil or data_optionData["Investigator"]["Investigator Player"] == "" then
      return false
    else
      return true
    end
  end
  data["End Mission"] = {
    priority = 10,
    runFunction = function(winner)
      local token = getObjectFromGUID(ref_tokens["Check Player"])
      if winner == "Resistance" then
        local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
        local teamPos = board.positionToWorld(ref_boardPosition.Vote)
        local tokenPo = token.clone({ position = teamPos })
        tokenPo.setRotation(board.getRotation())
        tokenPo.setLock(false)
        tokenPo.setName("Check Player")
        tokenPo.setScale({1.90, 1.00, 1.90})

        tokenPo.interactable = true
        clean_votes()

        data_gamePhase = "Investigating Resistance"
      elseif winner == "Spy" then
        local invest = data_optionData["Investigator"]["Investigator Player"]
        local board = getObjectFromGUID(ref_playerBoards[invest])
        local teamPos = board.positionToWorld(ref_boardPosition.Vote)
        local tokenPo = token.clone({ position = teamPos })
        tokenPo.setRotation(board.getRotation())
        tokenPo.setLock(false)
        tokenPo.setName("Check Player")
        tokenPo.setScale({1.90, 1.00, 1.90})

        tokenPo.interactable = true
        clean_votes()

        data_gamePhase = "Investigating Spy"
        return false
      end
    end}
  return data
end
function option_watching()
  local data = {}
  data["Deal Team"] = function(missionCount)
    local invest = getObjectFromGUID(ref_tokens["Watching"]).clone({
      position     = {0,1,15},
    })
    invest.setScale({1.07,1,1.07})
    invest.setName("Watching")
    invest.setLock(false)
    invest.interactable = true

    table.insert(objects_teamToken, invest)

    data_optionData["Watching"]["Watching Player"] = ""
    return missionCount
  end
  data["Watching Player"] = ""
  data["Team Requirement"] = function()
    -- Check Team Token area
    for index,color in pairs(data_playersInGame) do
      if color ~= data_currentLeader and data_missionTeam[color] ~= nil then
        local board = getObjectFromGUID(ref_playerBoards[color])
        local teamPos = board.positionToWorld(ref_boardPosition.Leader)
        local list = getObjectsAtPosition(teamPos, "Tile")
        if #list > 0 and list[1].getName() == "Watching" then
          if data_optionData["Watching"]["Watching Player"] ~= color then
            data_optionData["Watching"]["Watching Player"] = color
            objects_extraTeamCards[color] = {object = list[1], spot = "Leader"}
            data_extraTeam["Watching"] = color
            update_notes()
            return true
          end
        else
          if data_optionData["Watching"]["Watching Player"] == color then
            data_optionData["Watching"]["Watching Player"] = nil
            objects_extraTeamCards[color] = nil
            data_extraTeam["Watching"] = nil
            update_notes()
          end
        end
      end
    end

    if data_optionData["Watching"]["Watching Player"] == nil or data_optionData["Watching"]["Watching Player"] == "" then
      return false
    else
      return true
    end
  end
  return data
end
function option_inquistor()
  local data = {}
  data["Inquisitor"] = previousPlayer(data_currentLeader, data_playersInGame)
  data["Place Inquisitor"] = function(color, smooth)
    local inquisitorToken = getObjectFromGUID(ref_tokens["Inquisitor"])
    local board = getObjectFromGUID(ref_playerBoards[color])
    if not smooth then
      inquisitorToken.setPosition(board.positionToWorld({0,0.05,-2.4}))
      inquisitorToken.setRotation(board.getRotation())
    else
      inquisitorToken.setPositionSmooth(board.positionToWorld({0,0.05,-2.4}))
      inquisitorToken.setRotationSmooth(board.getRotation())
    end
  end

  data["Place Inquisitor"](data["Inquisitor"])

  data["End Mission"] = {
    priority = 5,
    runFunction = function(winner)
      if data_currentMission ~= 2 then
        local token = getObjectFromGUID(ref_tokens["Check Player"])
        local board = getObjectFromGUID(ref_playerBoards[data["Inquisitor"]])
        local teamPos = board.positionToWorld(ref_boardPosition.Vote)
        local tokenPo = token.clone({ position = teamPos })
        tokenPo.setRotation(board.getRotation())
        tokenPo.setLock(false)
        tokenPo.setScale({1.9,1,1.9})
        tokenPo.setName("Check Player")
        tokenPo.interactable = true
        clean_votes()
        data_gamePhase = "Inquisitor Check"
      else
        check_nextRound(winner)
      end
    end}
  return data
end
function option_trapper()
  local data = {}
  data["Deal Team"] = function(missionCount)
    return missionCount + 1
  end
  data["Mission Results"] = function()
    local token = getObjectFromGUID(ref_tokens["Trap Player"])
    local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
    local teamPos = board.positionToWorld(ref_boardPosition.Vote)
    local tokenPo = token.clone({ position = teamPos })
    tokenPo.setRotation(board.getRotation())
    tokenPo.setLock(false)
    tokenPo.setScale({1.9,1,1.9})
    tokenPo.setName("Trap Player")
    tokenPo.interactable = true
    clean_votes()
    data_gamePhase = "Trap Player"
  end
  return data
end
function option_sergeant()
  local data = {}
  data["Deal Team"] = function(missionCount)
    local invest = getObjectFromGUID(ref_tokens["Sergeant"]).clone({
      position     = {0,1,15},
    })
    invest.setScale({1.07,1,1.07})
    invest.setName("Sergeant")
    invest.setLock(false)
    invest.interactable = true

    table.insert(objects_teamToken, invest)

    data_optionData["Sergeant"]["Sergeant Player"] = ""
    return missionCount
  end
  data["Sergeant Player"] = ""
  data["Team Requirement"] = function()
    -- Check Team Token area
    for index,color in pairs(data_playersInGame) do
      if color ~= data_currentLeader and data_missionTeam[color] ~= nil then
        local board = getObjectFromGUID(ref_playerBoards[color])
        local teamPos = board.positionToWorld(ref_boardPosition.Leader)
        local list = getObjectsAtPosition(teamPos, "Tile")
        if #list > 0 and list[1].getName() == "Sergeant" then
          if data_optionData["Sergeant"]["Sergeant Player"] ~= color then
            data_optionData["Sergeant"]["Sergeant Player"] = color
            objects_extraTeamCards[color] = {object = list[1], spot = "Leader"}
            data_extraTeam["Sergeant"] = color
            update_notes()
            return true
          end
        else
          if data_optionData["Sergeant"]["Sergeant Player"] == color then
            data_optionData["Sergeant"]["Sergeant Player"] = nil
            objects_extraTeamCards[color] = nil
            data_extraTeam["Sergeant"] = nil
            update_notes()
          end
        end
      end
    end

    if data_optionData["Sergeant"]["Sergeant Player"] == nil or data_optionData["Sergeant"]["Sergeant Player"] == "" then
      return false
    else
      return true
    end
  end

  data["Mission Results"] = function()
    data_gamePhase = "Sergeant Check"
    local token = getObjectFromGUID(ref_tokens["Check Player"])
    local board = getObjectFromGUID(ref_playerBoards[data["Sergeant Player"]])
    local teamPos = board.positionToWorld(ref_boardPosition.Vote)
    local tokenPo = token.clone({ position = teamPos })
    tokenPo.setRotation(board.getRotation())
    tokenPo.setLock(false)
    tokenPo.setScale({1.9,1,1.9})
    tokenPo.setName("Sergeant")
    tokenPo.interactable = true

    local data = {click_function = "click_passSergeant", function_owner = self, label = "PASS",
    position = {0, 0, 1.2}, scale = {0.5, 0.5, 0.5}, width = 1000, height = 400, font_size = 400}
    tokenPo.createButton(data)
    clean_votes()
  end
  return data
end
function option_targeted()
  local data = {}
  data["Setup Team"] = function()
    local token = getObjectFromGUID(ref_tokens["Round Marker"])
    token.setScale({0.79, 1.00, 0.79})
    token.setLock(false)
    local board = getObjectFromGUID(ref_playerBoards[data_currentLeader])
    local teamPos = board.positionToWorld(ref_boardPosition.Leader)
    teamPos.y = teamPos.y + 0.1
    token.setPosition(teamPos)

    data_gamePhase = "Choose Round"
  end
  return data
end
function option_commSilence()
  local data = {}
  data["Allowed Info"] = 3
  data["Mission Results"] = function()
    data_gamePhase = "Commns Check"
    local placard = getObjectFromGUID(ref_tokens["Played Board"])
    placard.clearButtons()

    if data["Allowed Info"] > 0 then
      local send = {click_function = "click_sendInfo", function_owner = self, label = "Break Radio Silence",
      position = {0, 0, 2}, scale = {0.5, 0.5, 0.5}, width = 3500, height = 400, font_size = 400}
      local none = {click_function = "click_noInfo", function_owner = self, label = "Stay Dark",
      position = {0, 0, 2.5}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 400, font_size = 400}
      placard.createButton(send)
      placard.createButton(none)
    else
      click_noInfo(nil, data_currentLeader)
    end

    local data = {click_function = "nil_func", function_owner = self, label = "Transmissions Left: " .. data["Allowed Info"],
    position = {0, 0, -2}, scale = {0.5, 0.5, 0.5}, width = 0, height = 0,
    font_size = 400, color = {0.7573, 0.7573, 0.7573, 1}, font_color = {1, 1, 1, 1}}
    placard.createButton(data)
  end
  return data
end
function option_blindSpy()
  option_blindMode = true
  return {}
end
function option_randomRoles()
  local data = {}
  data["Load Roles"] = function()
    local totalPlayers = #data_playersInGame

    local allowedRoles = role_data

    local maxResistance = ref_resistanceCount[totalPlayers]
    local maxSpies = totalPlayers - maxResistance

    local maxRoles = math.random(data_randomMin, data_randomMax)

    allowedRoles = table.removeKey(allowedRoles, "Amnesiac")
    allowedRoles = checkAllowedRoles(allowedRoles,maxResistance,maxSpies,maxRoles)

    local selectedRoles = {}
    while true do
      local role = table.random(allowedRoles)
      addRoles(role.key, selectedRoles)

      local count = countRoles(role.key)

      maxResistance = maxResistance - count["Resistance"]
      maxSpies = maxSpies - count["Spies"]

      maxRoles = maxRoles - (count["Spies"] + count["Resistance"])

      if global_debug then
        print("New Max: " .. count["Spies"] .. " + " .. count["Resistance"] .. " -= " .. maxRoles)
      end

      allowedRoles = checkAllowedRoles(allowedRoles, maxResistance, maxSpies, maxRoles, selectedRoles)

      if table.size(allowedRoles) == 0 then
        break
      end
    end

    if not table.contains(data_specialRoles.secondary, "Amnesiac") and math.random(100) >= 85 then table.insert(selectedRoles, "Amnesiac") end
    if not table.contains(data_specialRoles.secondary, "Psionic") and math.random(100) >= 90 then table.insert(selectedRoles, "Psionic") end

    local outTeams = {resistance = {}, spies = {}, neutral = {}, secondary = {}}
    data_specialRoles = { resistance = {}, spies = {}, neutral = {}, secondary = {} }
    for _,role in pairs(selectedRoles) do
      if role_data[role]["Team"] == "Resistance" then
        if not table.contains(data_specialRoles.resistance, role) then
          table.insert(data_specialRoles.resistance, role)
          if role_data[role]["Double"] ~= nil and role_data[role]["Double"] <= totalPlayers then
            table.insert(data_specialRoles.resistance, role)
            table.insert(outTeams.resistance, role)
          end
          table.insert(outTeams.resistance, role)
        end
      elseif role_data[role]["Team"] == "Spy" then
        if not table.contains(data_specialRoles.spies, role) then
          table.insert(data_specialRoles.spies, role)
          if role_data[role]["Double"] ~= nil and role_data[role]["Double"] <= totalPlayers then
            table.insert(data_specialRoles.spies, role)
            table.insert(outTeams.spies, role)
          end
          table.insert(outTeams.spies, role)
        end
      elseif role_data[role]["Team"] == "Neutral" then
        if role_data[role]["Add"] ~= nil then
          for _,_ in pairs(role_data[role]["Add"].resistance) do
            if not table.contains(data_specialRoles.resistance, role) then
              table.insert(data_specialRoles.resistance, role)
              if role_data[role]["Double"] ~= nil and role_data[role]["Double"] <= totalPlayers then
                table.insert(data_specialRoles.resistance, role)
              end
            end
          end

          for _,_ in pairs(role_data[role]["Add"].spy) do
            if not table.contains(data_specialRoles.spies, role) then
              table.insert(data_specialRoles.spies, role)
              if role_data[role]["Double"] ~= nil and role_data[role]["Double"] <= totalPlayers then
                table.insert(data_specialRoles.spies, role)
              end
            end
          end
          table.insert(outTeams.neutral, role)
        else
          if not table.contains(data_specialRoles.neutral, role) then
            table.insert(data_specialRoles.neutral, role)
            if role_data[role]["Double"] ~= nil and role_data[role]["Double"] <= totalPlayers then
              table.insert(data_specialRoles.neutral, role)
            end
            table.insert(outTeams.neutral, role)
          end
        end
      else
        if not table.contains(data_specialRoles.secondary, role) then
          table.insert(data_specialRoles.secondary, role)
          if role_data[role]["Double"] ~= nil and role_data[role]["Double"] <= totalPlayers then
            table.insert(data_specialRoles.secondary, role)
          end
          table.insert(outTeams.secondary, role)

        end
      end
    end

    local resout = "[u][00aaFF]Resistance Roles[/u]"
    for _,rol in pairs(outTeams.resistance) do
      resout = resout .. "\n ◆ "..rol
    end

    local spyout = "[u][BB0000]Spy Roles[/u]"
    for _,rol in pairs(outTeams.spies) do
      spyout = spyout .. "\n [bb0000]◆ "..rol
    end

    local neuout = "[u][FFFF00]Neutral Roles[/u]"
    for _,rol in pairs(outTeams.neutral) do
      neuout = neuout .. "\n [ffff00]◆ "..rol
    end

    local secout = "[u][FFFF00]Secondary Roles[/u]"
    for _,rol in pairs(outTeams.secondary) do
      secout = secout .. "\n [ffff00]◆ "..rol
    end

    local out = ""
    if resout ~= "[u][00aaFF]Resistance Roles[/u]" then
      out = resout
    end
    if spyout ~= "[u][BB0000]Spy Roles[/u]" then
      out = out .. "\n" .. spyout
    end
    if neuout ~= "[u][FFFF00]Neutral Roles[/u]" then
      out = out .. "\n" .. neuout
    end
    if secout ~= "[u][FFFF00]Secondary Roles[/u]" then
      out = out .. "\n" .. secout
    end

    if out ~= "" and option_showRandomRoles then
      printToAll(out, {1,1,1})
    end
  end
  return data
end
function option_hiddenDefector()
  option_hiddenDefectors = true
  return {}
end
function option_knowDefector()
  option_knowDefectors = true
  return {}
end
function option_knowDeep()
  option_knowDeepAgent = true
  return {}
end
function option_plotCards()
  local data = {}

  local playersInGame = data_playersInGame
  for index, color in pairs(playersInGame) do
    data[color.."Cards"] = {}

    local playerHand = Player[color].getPlayerHand()
    local card = getObjectFromGUID(ref_plotCardPlacardGUIDs[color])

    local pos = {playerHand['pos_x'] + playerHand['trigger_forward_x'] * 16, 1.1, playerHand['pos_z'] + playerHand['trigger_forward_z'] * 16}
    local rot = {playerHand['rot_x'], playerHand['rot_y'] + 180, 0}
    card.setPosition(pos)
    card.setRotation(rot)
    card.setScale({2.30, 1.00, 2.30})
  end

  data["Cards"] = {}
  data["Setup Team"] = function()
    -- Reset Cards for the round
    for index, color in pairs(playersInGame) do
      data[color.."Cards"] = {}
    end

    local plotData = ref_plotCardDeck[#playersInGame]
    local deck = getObjectFromGUID(plotData.Deck)
    deck.shuffle()

    for i=1,plotData.Cards do
      local leaderBoard = getObjectFromGUID(ref_playerBoards[data_currentLeader])
      local card = deck.takeObject({ position = leaderBoard.positionToWorld(ref_plotCardDealPos[i]) })
      card.setRotation(leaderBoard.getRotation())

      data["Cards"][card.getGUID()] = {["Done"] = false}
    end

    broadcastToColor("Hand out Plot Cards", data_currentLeader, {1,1,0})

    data_gamePhase = "Check Plot Cards"
  end

  return data
end

function check_dealtPlotCards()
  local optData = data_optionData["Plot Cards"]

  local changed = false
  local count = 0
  for _,color in pairs(data_playersInGame) do
    if color ~= data_currentLeader then
      local placard = getObjectFromGUID(ref_plotCardPlacardGUIDs[color])
      local cardObj = findInBoxBy(placard.positionToWorld({0,0,0}), {15,1,4.3}, placard.getRotation(), function(o) return o.getDescription() == "Plot Card" and not optData["Cards"][o.getGUID()].Done end)
      local cards = objectTableToGUID(cardObj)
      count = count + #cards
      local equalityCheck = table.equals(cards, optData[color.."Cards"])
      if #cards > 0 and not equalityCheck then
        optData[color.."Cards"] = cards
        changed = true

        checkPlotCards(cardObj, color)
      elseif #cards == 0 and not equalityCheck then
        optData[color.."Cards"] = {}
        changed = true
      end
    end
  end

  if changed then
    data_optionData["Plot Cards"] = optData
    print("Changed cards: " .. count)
    if count == ref_plotCardDeck[#data_playersInGame].Cards then
      print("Move along")

      for guid,data in pairs(optData["Cards"]) do
        data.Done = true
      end

      data_optionData["Plot Cards"] = optData
      deal_teamTokens(true)
    end
  end
end

function checkPlotCards(cards, color)
  for i=1,#cards do
    local name = cards[i].getName()
    if name == "Overheard Conversation" then

      break
    end
  end
end


ref_plotCardPlacardGUIDs = {
  ["White"]   = "18a267", ["Brown"]   = "e2083c",
  ["Red"]     = "f2ea78", ["Orange"]  = "3bc006",
  ["Yellow"]  = "6e9f40", ["Green"]   = "87dd60",
  ["Teal"]    = "87dd25", ["Blue"]    = "059e1d",
  ["Purple"]  = "aa7e2e", ["Pink"]    = "8845c2",
}
ref_plotCardDealPos = { {0,0,-3.7}, {2,0,-3.7}, {-2,0,-3.7} }
ref_plotCardPlacard = { {0,0,0},{-2.09,0,0},{2.09,0,0},{-1.04,0,0},{1.04,0,0} }


ref_plotCardDeck = {
  [5] = {["Deck"] = "e152a6", ["Cards"] = 1},
  [6] = {["Deck"] = "e152a6", ["Cards"] = 1},
  [7] = {["Deck"] = "e152a6", ["Cards"] = 2},
  [8] = {["Deck"] = "e152a6", ["Cards"] = 2},
  [9] = {["Deck"] = "e152a6", ["Cards"] = 3},
  [10] = {["Deck"] = "e152a6", ["Cards"] = 3}
}

option_hiddenDefectors = false
option_knowDefectors = false
option_knowDeepAgent = false

function checkAllowedRoles(roles, resistance, spies, maxRoles, selectedRoles)
  local maxRoles = (maxRoles or 10)
  local selectedRoles = (selectedRoles or {})

  local outRole = {}
  local specialRoles = {}
  for _,data in pairs(data_specialRoles) do
    for _,role in pairs(data) do
      table.insert(specialRoles, role)
    end
  end

  for key,val in pairs(roles) do
    local counts = countRoles(key)
    if not table.contains(specialRoles, key) and counts["Spies"] + counts["Resistance"] <= maxRoles
    and not table.contains(selectedRoles, key) and counts["Resistance"] <= resistance
    and counts["Spies"] <= spies then
      outRole[key] = val
    elseif global_debug then
      local output = "Removed " .. key .. " for "
      if table.contains(specialRoles, key) then
        output = output .. "being in Selected Special Roles"
      elseif counts["Spies"] + counts["Resistance"] > maxRoles then
        output = output .. "exceeding max Roles: " .. counts["Spies"] .. " + " .. counts["Resistance"] .. " > " .. maxRoles
      elseif table.contains(selectedRoles, key) then
        output = output .. "role already choosen"
      elseif counts["Resistance"] > resistance then
        output = output .. "too many resistance roles: " .. counts["Resistance"] .. " > " .. resistance
      elseif counts["Spies"] > spies then
        output = output .. "too many spy roles: " .. counts["Spies"] .. " > " .. spies
      end
    end
  end

  return outRole
end

function addRoles(curRole, roles)
  table.insert(roles, curRole)

  if role_data[curRole]["Parent"] ~= nil then
    if not table.contains(roles, role_data[curRole]["Parent"]) then
      addRoles(role_data[curRole]["Parent"], roles)
    end
  end
  if role_data[curRole]["Siblings"] ~= nil and role_data[curRole]["Random Siblings"] == nil then
    for _,ro in pairs(role_data[curRole]["Siblings"]) do
      if not table.contains(roles, ro) then
        addRoles(ro, roles)
      end
    end
  end
  if role_data[curRole]["Random Siblings"] ~= nil then
    for _,ro in pairs(role_data[curRole]["Random Siblings"]) do
      if not table.contains(roles, ro) then
        addRoles(ro, roles)
      end
    end
  end
  if role_data[curRole]["Option"] ~= nil then
    if not table.contains(data_includedOptions, role_data[curRole]["Option"]) then
      local opt = role_data[curRole]["Option"]
      table.insert(data_includedOptions, opt)
      data_optionData[opt] = ref_options[opt]()
    end
  end
end

function countRoles(curRole, checkedRoles, prevRole)
  local checkedRoles = (checkedRoles or {curRole})

  local data = {["Resistance"] = 0, ["Spies"] = 0}
  if curRole == "" then return data end
  local role = role_data[curRole]

  local prevRole = (prevRole or "base")

  if global_debug then
    print("     Added "..curRole.. " from " .. prevRole)
    table.print(checkedRoles)
  end

  if role["Team"] == "Resistance" then
    data["Resistance"] = data["Resistance"] + 1
  elseif role["Team"] == "Spy" then
    data["Spies"] = data["Spies"] + 1
  elseif role["Team"] == "Neutral" then
    data["Resistance"] = data["Resistance"] + 1
    data["Spies"] = data["Spies"] + 1
  end

  if role["Double"] ~= nil and role["Double"] <= #data_playersInGame then
    if role["Team"] == "Resistance" then
      data["Resistance"] = data["Resistance"] + 1
    elseif role["Team"] == "Spy" then
      data["Spies"] = data["Spies"] + 1
    elseif role["Team"] == "Neutral" then
      data["Resistance"] = data["Resistance"] + 1
      data["Spies"] = data["Spies"] + 1
    end
  end

  if role["Parent"] ~= nil and role["Random Parent"] == nil then
    if not table.contains(checkedRoles, role["Parent"]) then
      table.insert(checkedRoles, role["Parent"])
      local dat = countRoles(role["Parent"], checkedRoles, curRole)
      data["Resistance"] = data["Resistance"] + dat["Resistance"]
      data["Spies"] = data["Spies"] + dat["Spies"]
    end
  end
  if role["Random Parent"] ~= nil then
    if not table.contains(checkedRoles, role["Random Parent"]) then
      table.insert(checkedRoles, role["Random Parent"])
      local dat = countRoles(role["Random Parent"], checkedRoles, curRole)
      data["Resistance"] = data["Resistance"] + dat["Resistance"]
      data["Spies"] = data["Spies"] + dat["Spies"]
    end
  end
  if role["Siblings"] ~= nil and role["Random Siblings"] == nil then
    for _,ro in pairs(role["Siblings"]) do
      if not table.contains(checkedRoles, ro) then
        table.insert(checkedRoles, ro)
        local dat = countRoles(ro, checkedRoles, curRole)
        data["Resistance"] = data["Resistance"] + dat["Resistance"]
        data["Spies"] = data["Spies"] + dat["Spies"]
      end
    end
  end
  if role["Random Siblings"] ~= nil then
    for _,ro in pairs(role["Random Siblings"]) do
      if not table.contains(checkedRoles, ro) then
        table.insert(checkedRoles, ro)
        local dat = countRoles(ro, checkedRoles, curRole)
        data["Resistance"] = data["Resistance"] + dat["Resistance"]
        data["Spies"] = data["Spies"] + dat["Spies"]
      end
    end
  end

  return data
end

option_blindMode = false

function click_sendInfo(obj, player)
  if player ~= data_currentLeader then return end

  local count = data_optionData["Communication Silence"]["Allowed Info"]
  local placard = getObjectFromGUID(ref_tokens["Played Board"])
  count = count - 1
  data_optionData["Communication Silence"]["Allowed Info"] = count

  local data = {click_function = "nil_func", function_owner = self, label = "Transmissions Left: " .. count,
  position = {0, 0, -2}, scale = {0.5, 0.5, 0.5}, width = 0, height = 0,
  font_size = 400, color = {0.7573, 0.7573, 0.7573, 1}, font_color = {1, 1, 1, 1}}
  placard.clearButtons()
  placard.createButton(data)

  data_showCards = true

  startLuaCoroutine(Global, "calculate_missionResults")
end

function click_noInfo(obj, player)
  if player ~= data_currentLeader then return end

  local count = data_optionData["Communication Silence"]["Allowed Info"]
  local placard = getObjectFromGUID(ref_tokens["Played Board"])
  local data = {click_function = "nil_func", function_owner = self, label = "Transmissions Left: " .. count,
  position = {0, 0, -2}, scale = {0.5, 0.5, 0.5}, width = 0, height = 0,
  font_size = 400, color = {0.7573, 0.7573, 0.7573, 1}, font_color = {1, 1, 1, 1}}
  placard.clearButtons()
  placard.createButton(data)

  data_showCards = false

  for _,card in pairs(object_revealedMission) do
    card.setScale({0,0,0})
    card.translate({0,-0.5,0})
  end

  startLuaCoroutine(Global, "calculate_missionResults")
end

function nil_func() end
