Vector = {}
-- Sum of two vectors (of any size)
Vector.Sum = function(vec1, vec2)
    assert(type(vec1) == 'table', 'Vector.Sum: arg#1 not a table!')
    assert(type(vec2) == 'table', 'Vector.Sum: arg#2 not a table!')
    local out = {}
    local k = 1
    while vec1[k] ~= nil and vec2[k] ~= nil do
        out[k] = vec1[k]+vec2[k]
        k = k+1
    end
    return out
end

-- Sum of two full vectors
Vector.FullSum = function(vec1, vec2)
  assert(type(vec1) == 'table', 'Vector.Sum: arg#1 not a table!')
  assert(type(vec2) == 'table', 'Vector.Sum: arg#2 not a table!')

  local out = {}
  for k,v in pairs(vec1) do
    if vec2[k] ~= nil then
      out[k] = vec1[k]+vec2[k]
    else
      out[k] = vec1[k]
    end
  end
  for k,v in pairs(vec2) do
    if vec1[k] == nil then
      out[k] = vec2[k]
    end
  end

  return out
end

-- Inverse of a vector
Vector.Inverse = function(vector)
    assert(type(vector) == 'table', 'Vector.Inverse: arg#1 not a table!')
    local out = {}
    local k = 1
    while vector[k] ~= nil do
        out[k] = 1/vector[k]
        k = k+1
    end
    return out
end

-- Multiply each element of a vector by a factor
Vector.Scale = function(vector, factor)
    assert(type(vector) == 'table', 'Vector.Scale: arg#1 not a table!')
    assert(type(factor) == 'number', 'Vector.Scale: arg#2 not a number!')
    local out = {}
    local k = 1
    while vector[k] ~= nil do
        out[k] = vector[k]*factor
        k = k+1
    end
    return out
end

-- Multiply each element of a vector by an element from factor vector
-- (element-wise vector multiplication)
Vector.ScaleEach = function(vector, factorVec)
    assert(type(vector) == 'table', 'Vector.ScaleEach: arg#1 not a table!')
    assert(type(factorVec) == 'table', 'Vector.ScaleEach: arg#2 not a table!')
    local out = {}
    local k = 1
    while vector[k] ~= nil and factorVec[k] ~= nil do
        out[k] = vector[k]*factorVec[k]
        k = k+1
    end
    return out
end

-- Length of  vector on X-Z plane (ignoring height)
Vector.Length = function(vector)
    assert(type(vector) == 'table', 'Vector.Length: arg#1 not a table!')
    return math.sqrt(vector[1]*vector[1] + vector[3]*vector[3])
end

-- Distance between two points
-- Points as vectors or objects (their positions)
Vector.Distance = function(pos1, pos2)
    assert(type(pos1) == 'table' or type(pos1) == 'userdata', 'Vector.Distance: arg#1 not a table/object!')
    assert(type(pos2) == 'table' or type(pos2) == 'userdata', 'Vector.Distance: arg#2 not a table/object!')
    if type(pos1) == 'userdata' then
        pos1 = pos1.getPosition()
    end
    if type(pos2) == 'userdata' then
        pos2 = pos2.getPosition()
    end
    return Vector.Length(Vector.Between(pos1, pos2))
end

-- Print vector elements
Vector.Print = function(vec, name)
    assert(type(vec) == 'table', 'Vector.Print: arg#1 not a table!')
    local out = '['
    if name then
        out = name .. ' => ' .. out
    end
    local k = 1
    while vec[k] ~= nil do
        out = out .. math.round(vec[k], 3) .. ' : '
        k = k+1
    end
    out = out:sub(1,-3) .. ']'
    print(out)
end

-- Dot product
Vector.DotProd = function(vec1, vec2)
    assert(type(vec1) == 'table', 'Vector.DotProd: arg#1 not a table!')
    assert(type(vec2) == 'table', 'Vector.DotProd: arg#2 not a table!')
    local sum = 0
    local k = 1
    while vec1[k] ~= nil and vec2[k] ~= nil do
        sum = sum + vec1[k]*vec2[k]
        k = k+1
    end
    return sum
end

-- Element-by-element comparison
-- Fails if length uneven
Vector.Compare = function(vec1, vec2)
    assert(type(vec1) == 'table', 'Vector.Compare: arg#1 not a table!')
    assert(type(vec2) == 'table', 'Vector.Compare: arg#2 not a table!')
    if #vec1 ~= #vec2 then
        return false
    end
    local k = 1
    while vec1[k] ~= nil and vec2[k] ~= nil do
        if vec1[k] ~= vec2[k] then
            return false
        end
        k = k+1
    end
    return true
end

-- Euclidean norm
Vector.Norm = function(vec)
    local selfDot = Vector.DotProd(vec, vec)
    return math.sqrt(selfDot)
end

-- Convert a vector to unit vector in the same direction
-- Return zero vector for zero vector
Vector.ToUnit = function(vec)
    if Vector.Norm(vec) == 0 then
        return vec
    end
    return Vector.Scale(vec, 1/Vector.Norm(vec))
end

-- Angle between vectors in radians
-- If second argument not provided, calculate typical angle (from [1, 0, 0, ...] )
Vector.Angle = function(vec1, vec2)
    if vec2 == nil then
        vec2 = {1}
        for k = 2, #vec1, 1 do
            table.insert(vec2, 0)
        end
    end
    return math.acos( Vector.DotProd(vec1, vec2) / (Vector.Norm(vec1)*Vector.Norm(vec2)) )
end

-- Angle between vectors in radians, in plane
-- If second argument not provided, calculate typical angle (from [1, 0, 0, ...] )
Vector.Angle2D = function(vec1, vec2)
    if vec2 == nil then
        vec2 = {1}
        for k = 2, #vec1, 1 do
            table.insert(vec2, 0)
        end
    end
    return ( math.atan2(vec2[3], vec2[1]) - math.atan2(vec1[3], vec1[1]) )
end

-- Same as Vector.Angle but in degrees
Vector.AngleDeg = function(vec1, vec2)
    return math.deg(Vector.Angle(vec1, vec2))
end

-- Same as Vector.Angle2D but in degrees
Vector.AngleDeg2D = function(vec1, vec2)
    return math.deg(Vector.Angle2D(vec1, vec2))
end

-- vectoror pointing from one position to another
Vector.Between = function(fromVec, toVec)
    return Vector.Sum(toVec, Vector.Scale(fromVec, -1))
end

-- vectoror pointing between two points
Vector.Middle = function(p1, p2)
    return Vector.Sum(p1, Vector.Scale(Vector.Between(p1, p2), 0.5))
end

-- Subtract vector from another
Vector.Sub = function(vec1, vec2)
    return Vector.Sum(vec1, Vector.Scale(vec2, -1))
end

-- Opposite of a vector
Vector.Opposite = function(vector)
    return Vector.Scale(vector, -1)
end

-- Rotation of a 3D vector over its second element axis, arg in degrees
-- Elements past 3rd are copied
Vector.RotateDeg = function(vector, degRotation)
    local radRotation = math.rad(degRotation)
    return Vector.RotateRad(vector, radRotation)
end

-- Scale the vector to have set length
-- Negative "length" - opposite of set length
Vector.SetLength = function(vector, len)
    return Vector.Scale(vector, len/Vector.Length(vector))
end

-- Format vector with 1, 2, 3, x, y, and z
Vector.Format = function(vect)
  local vec = {
    [1] = vect.x or vect[1],
    [2] = vect.y or vect[2],
    [3] = vect.z or vect[3],
    x = vect.x or vect[1],
    y = vect.y or vect[2],
    z = vect.z or vect[3]
  }

  return vec
end
